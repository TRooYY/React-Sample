(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {})));
})(this, (function (exports) { 'use strict';

  const supportsSymbol = typeof Symbol === 'function' && Symbol.for;
  const REACT_ELEMENT_TYPE = supportsSymbol ? Symbol.for('react.element') : 0xEAC7;

  /**
   * React Element 构造函数
   */
  function ReactElement(type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          __mark: 'hyoban',
      };
      return element;
  }
  function isValidElement$1(object) {
      return (typeof object === 'object'
          && object !== null
          && object.$$typeof === REACT_ELEMENT_TYPE);
  }
  function jsx(type, config, ...maybeChildren) {
      // NOTE: 此处的 jsx 方法统一了 React.createElement 的处理
      // 实际情况下，两者的实现不相同
      const props = {};
      let key = null;
      let ref = null;
      for (const propName in config) {
          // 筛选出 key 和 ref，其他的都作为 props
          const val = config[propName];
          if (propName === 'key') {
              if (val !== undefined) {
                  key = `${val}`;
              }
          }
          else if (propName === 'ref') {
              if (val !== undefined) {
                  ref = val;
              }
          }
          else if ({}.hasOwnProperty.call(config, propName)) {
              // 排除原型链上的属性
              props[propName] = val;
          }
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          if (maybeChildrenLength === 1) {
              props.children = maybeChildren[0];
          }
          else {
              props.children = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  }

  // import type { Dispatcher } from './src/currentDispatcher'
  const version = '1.0.0';
  const isValidElement = isValidElement$1;
  // TODO: 根据环境区分使用jsx/jsxDEV
  const createElement = jsx;
  // export const useState: Dispatcher['useState'] = (initialState) => {
  //   const dispatcher = resolveDispatcher()
  //   return dispatcher.useState(initialState)
  // }
  // /**
  //  * 内部数据共享层
  //  */
  // export const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
  //   currentDispatcher,
  // }

  exports.createElement = createElement;
  exports.isValidElement = isValidElement;
  exports.version = version;

}));
